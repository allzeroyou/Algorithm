# 상, 하, 좌, 우로 붙어있는 경우 서로 연결되어 있는 것으로 간주.
# 얼음틀이 주어졌을 때 생성되는 총 아이스크림 개수?

# solution
# 얼음 얼릴 수 있는 공간 -> 상,하,좌,우로 연결 -> 그래프 형태로 모델링 가능.
# dfs
# 1. 특정 지점의 주변 상, 하, 좌, 우를 살펴본 뒤에 주변 지점 중에서 값이 '0'이면서 아직 방문하지 않은 지점이 있다면, 해당 지점 방문
# 2. 방문한 지점에서 다시 상, 하, 좌, 우를 살펴보면서 방문을 다시 진행 -> 연결된 모든 지점 방문
# 3. 1~2번 과정을 모든 노드에 반복해 방문하지 않은 지점의 수를 센다.

# N, M을 공백으로 구분해 입력받기
n, m = map(int, input().split())
# 2차원 리스트의 맵 정보 입력받기
graph = []
for i in range(n):
    graph.append(list(map(int, input())))


# dfs로 특정 노드를 방문한 뒤에 연결된 모든 노드들도 방문
def dfs(x, y):
    # 주어진 범위를 벗어나는 경우에는 즉시 종료
    if x <= -1 or x >= n or y <= -1 or y >= m:
        return False
    # 현재 노드를 아직 방문하지 않았다면
    if graph[x][y] == 0:
        # 해당 노드 방문 처리
        graph[x][y] = 1
        # 상, 하, 좌, 우의 위치도 모두 재귀적으로 호출
        dfs(x - 1, y)
        dfs(x + 1, y)
        dfs(x, y - 1)
        dfs(x, y + 1)
        return True
    return False


# 모든 노드에 대해 음료수 채우기
result = 0
for i in range(n):
    for j in range(m):
        # 현재 위치에서 dfs 수행
        if dfs(i, j):
            result += 1
print(result)
'''
# 1
4 5
00110
00011
11111
0000
# 2
15 14
00000111100000
11111101111110
11011101101110
11011101100000
11011111111111
11011111111100
11000000011111
01111111111111
00000000011111
01111111111000
00011111111000
00000001111000
11111111110011
11100011111111
11100011111111

'''
