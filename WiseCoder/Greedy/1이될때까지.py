'''
어떠한 수 N이 1이 될때까지 다음의 두 과정 중 하나를 반복적으로 선택 후 수행
단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택 가능
1. N에서 1을 뺀다
2. N을 K로 나눈다

예를 들어 N이 17, K가 4라고 가정
이때 1번의 과정을 한번 수행 -> N: 16
이후에 2번의 과정을 두번 수행 -> N: 1
결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 된다. 이는 N을 1로 만드는 최소 횟수임
N과 K가 주어질 때 N이 1일 될 때까지 1번/2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램 구성
'''



# N, K 공백을 기준으로 구분해 입력받기
n, k = map(int, input().split())

result = 0

while True:
    # N이 K로 나누어 떨어지는 수가 될때까지 빼기
    target = (n//k)*k        # n이 k로 나눠 떨어지지 않더라도 가장 가까운 k로 나눠 떨어지는 수 찾기
    result += (n-target)     # 총 연산횟수
    n = target
    # n이 k보다 작을 때 (더 이상 나눌 수 없을때) 반복문 탈출
    if n < k:
        break
    # k로 나누기
    result += 1
    n //= k
# 마지막으로 남은 수에 대해 1씩 빼기
result += (n-1)
print(result)

'''
문제 해결 아이디어)
주어진 N에 대해 최대한 많이 나누기 수행하면 됨

N의 값을 줄일 때, 2이상의 수로 나누는 작업이 1을 빼는 작업보다 수를 훨씬 많이 줄일 수 있음

정당성 분석)
가능하면 최대한 많이 나누는 작업이 최적의 해를 항상 보장할 수 있을까요?
N이 아무리 큰 수여도, K로 계속 나눈다면 기하급수적으로 빠르게 줄일 수 있음
다시말해, K가 2이상이기만 하면, K로 나누는 것이 1을 빼는 것보다 항상 빠르게 N을 줄일 수 있음
'''